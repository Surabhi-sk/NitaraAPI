package com.nitara.PDManagement;

import java.io.IOException;

import org.json.JSONArray;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.Test;
import com.nitara.CattleDetails.ViewCattleBreedingActivity;
import com.nitara.CattleRegistration.RegisterMilkingOrDryCattle;
import com.nitara.InseminationManagement.AddInsemination;
import com.nitara.base.GenericBase;
import com.nitara.utilities.ExcelUtils;
import com.nitara.utilities.Helper;

import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class AddPD extends GenericBase{

	@Test(groups= {"Smoke"})
	public void addPD() throws IOException {

		String abstractname = prop.getProperty("AddPD");
		RestAssured.baseURI = prop.getProperty("baseurl");
		String filepath = prop.getProperty("CattleBreedingData");


		RequestSpecification request = RestAssured.given();

		//Read from excel to JSONArray
		ExcelUtils data = new ExcelUtils();
		JSONObject requestParams = data.readCase("AddPD","AddPDwithValidData",filepath);

		Response response = request.body(requestParams.toString())
				.header("Content-Type", "application/json")
				.header("Authorization","Bearer " + token)
				.post(abstractname);

		//Print response
		response.prettyPeek();

		//Validate status code
		Assert.assertEquals(200, response.getStatusCode());


		//Validate success message
		String jsonString = response.asString();
		String  message = JsonPath.from(jsonString).get("message");
		Assert.assertEquals("Pd data added Successfully.", message);


		//Assert the updated changes
		ViewCattleBreedingActivity cattle = new ViewCattleBreedingActivity();
		String viewDetails = cattle.viewCattleBreedingActivity(requestParams.getString("CattleId"),1,token);

		//Parse JSON response
		JSONObject cattleDetails = new JSONObject(viewDetails);
		JSONObject cattleMilkingData = cattleDetails.getJSONObject("cattleMilkingData");
		JSONArray breedingActivities = cattleMilkingData.getJSONArray("breedingActivities");
		JSONObject activity = breedingActivities.getJSONObject(breedingActivities.length()-1);

		Assert.assertEquals("PD",activity.getString("activity"));
		if(requestParams.get("isCattlePregnant").equals(true)) {
			Assert.assertEquals("Pregnant",activity.getString("pdResult"));}
		else {
			Assert.assertEquals("Not Pregnant",activity.getString("pdResult"));
		}
		String date = requestParams.getString("pregnancyTestDate");
		Assert.assertEquals(activity.getString("date").contains(date),true);

	}


	@Test(groups= {"Regression"})
	public void addPDwithFutureDate() throws IOException {

		String abstractname = prop.getProperty("AddPD");
		RestAssured.baseURI = prop.getProperty("baseurl");
		String filepath = prop.getProperty("CattleBreedingData");


		RequestSpecification request = RestAssured.given();

		//Read from excel to JSONArray
		ExcelUtils data = new ExcelUtils();
		JSONObject requestParams = data.readCase("AddPD","AddPD",filepath);

		Helper date = new Helper();

		requestParams.put("pregnancyTestDate", date.getDate(2));

		Response response = request.body(requestParams.toString())
				.header("Content-Type", "application/json")
				.header("Authorization","Bearer " + token)
				.post(abstractname);

		//Print response
		response.prettyPeek();

		//Validate status code
		Assert.assertEquals(response.getStatusCode(),400);


		///Assert error message
		String jsonString = response.asString(); 
		JSONObject res = new JSONObject(jsonString);
		JSONObject error = res.getJSONObject("errors");


		JSONArray obj = error.getJSONArray( "PregnancyTestDate");
		Assert.assertEquals( obj.getString(0).contains("must not be greater than today"),true);
	}



	@Test(groups= {"Regression"})
	public void addPDwithin21DaysofInsemination() throws Exception {

		String abstractname = prop.getProperty("AddPD");
		RestAssured.baseURI = prop.getProperty("baseurl");
		String filepath = prop.getProperty("CattleBreedingData");


		RequestSpecification request = RestAssured.given();

		RegisterMilkingOrDryCattle cat = new RegisterMilkingOrDryCattle();
		cat.registerMilkingOrDryCattle();

		Helper date = new Helper();

		AddInsemination in = new AddInsemination();
		String InsemDate =  date.getDate(-20);
		in.AddInseminationData(InsemDate,token);

		//Read from excel to JSONArray
		ExcelUtils data = new ExcelUtils();
		JSONObject requestParams = data.readCase("AddPD","AddPD",filepath);


		requestParams.put("pregnancyTestDate", date.getDate(-1));

		Response response = request.body(requestParams.toString())
				.header("Content-Type", "application/json")
				.header("Authorization","Bearer " + token)
				.post(abstractname);

		//Print response
		response.prettyPeek();

		//Validate status code
		Assert.assertEquals(response.getStatusCode(),400);


		///Assert error message
		//Validate success message
		String jsonString = response.asString();
		String  message = JsonPath.from(jsonString).get("message");
		Assert.assertEquals(message,"PD Date cannot be within 21 days of Last Insemination Date.");
		//
	}



	public void addPD(Boolean result, String date, String token) throws Exception {

		String abstractname = prop.getProperty("AddPD");
		RestAssured.baseURI = prop.getProperty("baseurl");
		String filepath = prop.getProperty("CattleBreedingData");


		RequestSpecification request = RestAssured.given();

		//Read from excel to JSONArray
		ExcelUtils data = new ExcelUtils();
		JSONObject requestParam = data.readData("AddPD",filepath);
		requestParam.put("isCattlePregnant",result);
		requestParam.put("pregnancyTestDate",date);

		Response response = request.body(requestParam.toString())
				.header("Content-Type", "application/json")
				.header("Authorization","Bearer " + token)
				.post(abstractname);

		//Print response
		response.prettyPeek();

		//Validate status code
		Assert.assertEquals(response.getStatusCode(),200);


		//Validate success message
		String jsonString = response.asString();
		String  message = JsonPath.from(jsonString).get("message");
		Assert.assertEquals("Pd data added Successfully.", message);

		//Assert the updated changes
		ViewCattleBreedingActivity cattle = new ViewCattleBreedingActivity();
		String viewDetails = cattle.viewCattleBreedingActivity(requestParam.getString("CattleId"),1,token);

		JSONObject cattleDetails = new JSONObject(viewDetails);
		JSONObject cattleMilkingData = cattleDetails.getJSONObject("cattleMilkingData");
		JSONArray breedingActivities = cattleMilkingData.getJSONArray("breedingActivities");
		JSONObject activity = breedingActivities.getJSONObject(breedingActivities.length()-1);

		Assert.assertEquals("PD",activity.getString("activity"));
		if(requestParam.get("isCattlePregnant").equals(true)) {
			Assert.assertEquals("Pregnant",activity.getString("pdResult"));}
		else {
			Assert.assertEquals("Not Pregnant",activity.getString("pdResult"));
		}
	}

}